name: CI Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq unzip
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pylint

      - name: Analizando codigo Python con pylint
        run: |
          pylint $(git ls-files '*.py')

      - name: Install Terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform -y

      - name: Verify Terraform Formatting
        run: |
          terraform fmt -check

      - name: Initialize and Validate Terraform
        run: |
          terraform init -backend=false
          terraform validate

  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - id: 'auth'
      - uses: 'google-github-actions/auth@v2'
        with: |
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
        run:
          gcloud config set project $GCP_PROJECT_ID
          gcloud config set compute/region $GCP_REGION

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker "${{ secrets.GCP_REGION }}-docker.pkg.dev"

      - name: Build Docker image
        run: |
          IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_CR_REPOSITORY_NAME }}/data-api:latest"
          docker build -t $IMAGE_NAME ./src
          docker push $IMAGE_NAME

  deploy:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Update Terraform .tfvars file with Docker image
        run: |
          echo 'image = "${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_CR_REPOSITORY_NAME }}/data-api:latest"' >> Terraform/prod.tfvars

      - name: Install Terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform -y

      - name: Initialize Terraform
        run: |
          cd Terraform
          terraform init

      - name: Apply Terraform Changes
        run: |
          terraform apply -var-file="prod.tfvars" -auto-approve